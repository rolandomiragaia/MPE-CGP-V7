function init_(this, configuration_file)

    % configuration
    this.config_ = Configuration(configuration_file).get();

    % inputs
    this.inputs_ = Inputs(this.config_.signal, 'train');

    % fitness
    this.fitness_ = Fitness(this.config_);

    this.report_ = Report( ...
        this.config_, ...
        this.fitness_, ...
        this.inputs_.get() ...
    );

    this.cgp_ = cgptoolbox.CGP(this.config_.cgp);

    this.cgp_.addInputs(this.inputs_.get());

    this.cgp_.addParameters(                   ...
        struct(                                ...
            'name', 'interval',                ...
            'initialize', @()rand(),           ...
            'mutate', @this.mutateIntervalByNormal_    ...
        ),                                     ...
        struct(                                ...
            'name', 'constant',                ...
            'initialize', @()randi([-10, 10]), ...
            'mutate', @this.mutateConstantByNormal_  ...
        )                                      ...
    );

    this.cgp_.addFunctionsFromPath(this.config_.signal.function_set);

    this.cgp_.addFitnessFunction(this.fitness_.handler());

    if ~isempty(fieldnames(this.config_.report.callbacks))
        fields = fieldnames(this.config_.report.callbacks);

        for i = 1:size(fields, 1)
            callbacks.(char(fields(i))) = this.report_.callback(char(fields(i)));
        end

        this.cgp_.addCallbacks(callbacks);
    end
end
