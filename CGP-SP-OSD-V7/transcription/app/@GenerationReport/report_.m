function report_(this, vararg)

    this.state_.generation = vararg.generation;

    if (vararg.generation == 1 || vararg.generation == this.config_.max_generations || ~mod(vararg.generation, this.config_.generation_frequency) || strcmp(vararg.name, 'FITTEST_SOLUTION'))

        this.incremmentRun_(vararg.generation);
        this.setupGenerationDirAndFile_(vararg.fitness);

        store = this.store_.fitnessInstance.getStore();

        if vararg.run ~= this.state_.run
            this.state_.run = vararg.run;
            mkdir(this.getGenerationDir_());
            this.store_.files.generation = fopen([this.getGenerationDir_(), num2str(vararg.fitness), '.txt'], 'wt');
        end

        fprintf('%d - %.16f th - %.5f\n', vararg.generation, store.fitness,store.threshold);

        fprintf( ...
            this.store_.files.generation, ...
            'generation:%d\nfitness:%.16f\nthreshold:%.16f\ntrue positives:%d\ntrue negatives:%d\nfalse positives:%d\nfalse negatives:%d\n%s\nactive: ', ...
            vararg.generation, ...
            store.fitness, ...
            store.threshold, ...
            store.tp.total, ...
            store.tn.total, ...
            store.fp.total, ...
            store.fn.total, ...
            strjoin( ...
                this.decodeNodes_( ...
                    vararg.activeNodes, ...
                    vararg.functionSet, ...
                    vararg.genes, ...
                    vararg.structure ...
                ) ...
            ) ...
        );

        for i = 1:size(vararg.activeNodes, 2)
            fprintf(this.store_.files.generation, '%f, ', vararg.activeNodes(i));
        end
        fprintf(this.store_.files.generation, '\ngenes: ');
        for i = 1:size(vararg.genes, 2)
            if mod(i, 5) == 0
                fprintf(this.store_.files.generation, '\n');
            end
            fprintf(this.store_.files.generation, '%f, ', vararg.genes(i));
            if i == 4
                fprintf(this.store_.files.generation, '\n');
            end
        end

        if strcmp(this.config_.type_signal, 'record')
            % true positives
            fprintf ( ...
                this.store_.files.tp, ...
                'true positives:\n%s\n', ...
                this.store_.testCases.positive( ...
                    store.tp.values( ...
                        store.tp.values > 0 ...
                    ) ...
                ).name ...
            );

            % true negatives
            fprintf ( ...
                this.store_.files.tn, ...
                'true negatives:\n%s\n', ...
                this.store_.testCases.negative( ...
                    store.tn.values( ...
                        store.tn.values > 0 ...
                    ) - size(this.store_.testCases.positive, 1) ...
                ).name ...
            );

            % false positives
            fprintf ( ...
                this.store_.files.fp, ...
                'false positives:\n%s\n', ...
                this.store_.testCases.negative( ...
                    store.fp.values( ...
                        store.fp.values > 0 ...
                    ) - size(this.store_.testCases.positive, 1) ...
                ).name ...
            );

            % false negatives
            fprintf ( ...
                this.store_.files.fn, ...
                'false negatives:\n%s\n', ...
                this.store_.testCases.positive( ...
                    store.fn.values( ...
                        store.fn.values > 0 ...
                    ) ...
                ).name ...
            );
        end

        if this.config_.print_figures && ~mod(vararg.generation, 50) 

            for j = 1:size(store.results, 1)
                fig = figure('Visible','off');
                subplot(2,2,[3,4]);
                plot(this.config_.base_signal, 'Color', [1, 0, 0]);

                hold on;
                plot(store.results(j,:), 'Color', [0.8, 0.8, 0.8]);
                title('Intersection Of Phenotype with Base Signal');
                legend('Base Signal', 'Phenotype');

                subplot(2,2,1);
                plot(this.config_.base_signal, 'Color', [1, 0, 0]);
                legend('Base Signal');
                title('Base Signal');

                subplot(2,2,2);
                plot(store.results(j,:), 'Color', [0.8, 0.8, 0.8]);
                legend('Phenotype');
                title('Phenotype');

                print(fig, [this.getGenerationDir_(), 'figures/', num2str(j, '%02d'), '-', num2str(store.fitness), '.png'],'-dpng');
            end
        end
        fclose('all');
    end
end
